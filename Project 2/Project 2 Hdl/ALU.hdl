// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    //Sets zx/nx
    Mux16(a= x, b= false, sel= zx, out= xzeroed);
    Not16(in= xzeroed, out= notxzeroed);
    Mux16(a= xzeroed, b= notxzeroed, sel= nx, out= inx);
    //sets zy/ny
    Mux16(a= y, b= false, sel= zy, out= yzeroed);
    Not16(in= yzeroed, out= notyzeroed);
    Mux16(a= yzeroed, b= notyzeroed, sel= ny, out= iny);
    //computes f
    Add16(a= inx, b= iny, out= xyadd);
    And16(a= inx, b= iny, out= xyand);
    Mux16(a= xyand, b= xyadd, sel= f, out= fdone);
    //compute no/ng
    Not16(in= fdone, out= fnegated);
    Mux16(a= fdone, b= fnegated, sel= no, out= out, 
    //no idea how anything under this works 
    out[0..7] = zr17, out[8..15] = zr815, out[15] = ng);
    //compute zr
    Or8Way(in=zr17, out=orzr1);
   Or8Way(in=zr815, out=orzr2);
   Or(a=orzr1, b=orzr2, out=notzr);
   Not(in=notzr, out=zr);
    

}